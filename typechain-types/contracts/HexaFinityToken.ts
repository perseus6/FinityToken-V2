/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface HexaFinityTokenInterface extends utils.Interface {
  functions: {
    "_burnAddress()": FunctionFragment;
    "_burnFee()": FunctionFragment;
    "_liquidityFee()": FunctionFragment;
    "_maxTxAmount()": FunctionFragment;
    "_ownerFee()": FunctionFragment;
    "_taxFee()": FunctionFragment;
    "_taxReceiverAddress()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "excludeFromFee(address)": FunctionFragment;
    "excludeFromReward(address)": FunctionFragment;
    "geUnlockTime()": FunctionFragment;
    "includeInFee(address)": FunctionFragment;
    "includeInReward(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFee(address)": FunctionFragment;
    "isExcludedFromReward(address)": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "reflectionFromToken(uint256,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBurnFeePercent(uint256)": FunctionFragment;
    "setLiquidityFeePercent(uint256)": FunctionFragment;
    "setMaxTxPercent(uint256)": FunctionFragment;
    "setOwnerFeePercent(uint256)": FunctionFragment;
    "setSwapAndLiquifyEnabled(bool)": FunctionFragment;
    "setTaxFeePercent(uint256)": FunctionFragment;
    "setTaxReceiverAddress(address)": FunctionFragment;
    "swapAndLiquifyEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenFromReflection(uint256)": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "unlock()": FunctionFragment;
    "updateBurnAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_burnAddress"
      | "_burnFee"
      | "_liquidityFee"
      | "_maxTxAmount"
      | "_ownerFee"
      | "_taxFee"
      | "_taxReceiverAddress"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "excludeFromFee"
      | "excludeFromReward"
      | "geUnlockTime"
      | "includeInFee"
      | "includeInReward"
      | "increaseAllowance"
      | "isExcludedFromFee"
      | "isExcludedFromReward"
      | "lock"
      | "name"
      | "owner"
      | "reflectionFromToken"
      | "renounceOwnership"
      | "setBurnFeePercent"
      | "setLiquidityFeePercent"
      | "setMaxTxPercent"
      | "setOwnerFeePercent"
      | "setSwapAndLiquifyEnabled"
      | "setTaxFeePercent"
      | "setTaxReceiverAddress"
      | "swapAndLiquifyEnabled"
      | "symbol"
      | "tokenFromReflection"
      | "totalFees"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "unlock"
      | "updateBurnAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_burnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_burnFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_ownerFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "_taxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_taxReceiverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "geUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionFromToken",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxReceiverAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFromReflection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBurnAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_burnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_burnFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ownerFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_taxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_taxReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "geUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTaxReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFromReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBurnAddress",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "MinTokensBeforeSwapUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "SwapAndLiquifyEnabledUpdated(bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinTokensBeforeSwapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SwapAndLiquifyEnabledUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MinTokensBeforeSwapUpdatedEventObject {
  minTokensBeforeSwap: BigNumber;
}
export type MinTokensBeforeSwapUpdatedEvent = TypedEvent<
  [BigNumber],
  MinTokensBeforeSwapUpdatedEventObject
>;

export type MinTokensBeforeSwapUpdatedEventFilter =
  TypedEventFilter<MinTokensBeforeSwapUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapAndLiquifyEventObject {
  tokensSwapped: BigNumber;
  ethReceived: BigNumber;
  tokensIntoLiqudity: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface SwapAndLiquifyEnabledUpdatedEventObject {
  enabled: boolean;
}
export type SwapAndLiquifyEnabledUpdatedEvent = TypedEvent<
  [boolean],
  SwapAndLiquifyEnabledUpdatedEventObject
>;

export type SwapAndLiquifyEnabledUpdatedEventFilter =
  TypedEventFilter<SwapAndLiquifyEnabledUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface HexaFinityToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HexaFinityTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _burnAddress(overrides?: CallOverrides): Promise<[string]>;

    _burnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _liquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxTxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _ownerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _taxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _taxReceiverAddress(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    geUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnerFeePercent(
      ownerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxFeePercent(
      taxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxReceiverAddress(
      _taxReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBurnAddress(
      _newBurnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _burnAddress(overrides?: CallOverrides): Promise<string>;

  _burnFee(overrides?: CallOverrides): Promise<BigNumber>;

  _liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  _ownerFee(overrides?: CallOverrides): Promise<BigNumber>;

  _taxFee(overrides?: CallOverrides): Promise<BigNumber>;

  _taxReceiverAddress(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  geUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  includeInFee(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includeInReward(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcludedFromReward(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  reflectionFromToken(
    tAmount: BigNumberish,
    deductTransferFee: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurnFeePercent(
    burnFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityFeePercent(
    liquidityFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTxPercent(
    maxTxPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnerFeePercent(
    ownerFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAndLiquifyEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxFeePercent(
    taxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxReceiverAddress(
    _taxReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenFromReflection(
    rAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBurnAddress(
    _newBurnAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _burnAddress(overrides?: CallOverrides): Promise<string>;

    _burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    _liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _ownerFee(overrides?: CallOverrides): Promise<BigNumber>;

    _taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _taxReceiverAddress(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    excludeFromFee(account: string, overrides?: CallOverrides): Promise<void>;

    excludeFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    geUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    includeInFee(account: string, overrides?: CallOverrides): Promise<void>;

    includeInReward(account: string, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerFeePercent(
      ownerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxFeePercent(
      taxFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxReceiverAddress(
      _taxReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    unlock(overrides?: CallOverrides): Promise<void>;

    updateBurnAddress(
      _newBurnAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "MinTokensBeforeSwapUpdated(uint256)"(
      minTokensBeforeSwap?: null
    ): MinTokensBeforeSwapUpdatedEventFilter;
    MinTokensBeforeSwapUpdated(
      minTokensBeforeSwap?: null
    ): MinTokensBeforeSwapUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiqudity?: null
    ): SwapAndLiquifyEventFilter;

    "SwapAndLiquifyEnabledUpdated(bool)"(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;
    SwapAndLiquifyEnabledUpdated(
      enabled?: null
    ): SwapAndLiquifyEnabledUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _burnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    _burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    _liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    _maxTxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    _ownerFee(overrides?: CallOverrides): Promise<BigNumber>;

    _taxFee(overrides?: CallOverrides): Promise<BigNumber>;

    _taxReceiverAddress(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    geUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnerFeePercent(
      ownerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxFeePercent(
      taxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxReceiverAddress(
      _taxReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndLiquifyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBurnAddress(
      _newBurnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _burnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _burnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxTxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ownerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _taxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _taxReceiverAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    geUnlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    includeInFee(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includeInReward(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reflectionFromToken(
      tAmount: BigNumberish,
      deductTransferFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurnFeePercent(
      burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityFeePercent(
      liquidityFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTxPercent(
      maxTxPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerFeePercent(
      ownerFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAndLiquifyEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxFeePercent(
      taxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxReceiverAddress(
      _taxReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndLiquifyEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFromReflection(
      rAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBurnAddress(
      _newBurnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
